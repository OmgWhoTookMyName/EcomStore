@page "/createcategorylink"
@using MyFirstEcommerceStore.Data.Models
@using MyFirstEcommerceStore.Data
@using Microsoft.Extensions.Logging
@inject ILogger<CategoryLinkCreateDialog> Logger
@inject DialogService DialogService


    <div class="row">
        <div class="align-items-center d-flex col-md-2">
            <RadzenLabel Text="ProductId" />
        </div>
        <div class="col-md-10">
            <RadzenDropDownDataGrid TValue=string Name="ProductId" Data=productIds @bind-Value=prod />
            <RadzenRequiredValidator Component="ProductId" Text="Product id is required" Style="position: absolute" />   
        </div>
    </div>
    <div class="row">
        <div class="align-items-center d-flex col-md-2">
            <RadzenLabel Text="CategoryId" />
        </div>
        <div class="col-md-10">
            <RadzenDropDownDataGrid TValue=string Name="Category" Data=catNames @bind-Value=cat />
            <RadzenRequiredValidator Component="Category" Text="Category is required" Style="position: absolute" />
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" Click=@HandleSubmit />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
        </div>
    </div>

@code {

    private Products product = new();
    private Category category = new();
    private ProductCRUD crud = new();
    private CategoryCRUD catCrud = new();
    IEnumerable<Products>? products;
    IEnumerable<Category>? categories;
    IEnumerable<string>? productIds, catNames;
    private string? prod, cat;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        products = await crud.GetAllProducts();
        categories = await catCrud.GetAllCategories();
        productIds = products.Select(p => p.ProductId);
        catNames = categories.Select(c => c.CategoryName);
    }

    private async void HandleSubmit()
    {
        //category = await crud.BrandCleanser(brand);
        if(!string.IsNullOrEmpty(prod) && !string.IsNullOrEmpty(cat))
        {
            product = await crud.GetProductById(prod);
            category = await catCrud.GetCategoryByName(cat);
            await catCrud.CreateCategoryLinks(product, category);
        }
        DialogService.Close();
    }

    void Cancel()
    {
        DialogService.Close();
    }

}
