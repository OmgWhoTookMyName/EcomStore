@page "/createproduct"
@using MyFirstEcommerceStore.Data.Models
@using MyFirstEcommerceStore.Data
@using Microsoft.Extensions.Logging
@inject ILogger<ProductCreateDialog> Logger
@inject DialogService DialogService

<RadzenTemplateForm Data="@product" TItem="Products" Submit=@HandleSubmit>
                    <div class="row">
                        <div class="align-items-center d-flex col-md-2">
                            <RadzenLabel Text="SKU" />
                        </div>
                        <div class="col-md-10">
                            <RadzenTextBox Placeholder="123-456" style="width: 10rem; margin-right: 0.5rem" Name="ProductId" @bind-Value=@product.ProductId/>
                            <RadzenRequiredValidator Component="ProductId" Text="SKU is required" Style="position: absolute" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="align-items-center d-flex col-md-2">
                            <RadzenLabel Text="Name" />
                        </div>
                        <div class="col-md-6">
                            <RadzenTextBox Placeholder="Rainbow PLA" style="width: 100%;" Name="Product Name" @bind-Value=@product.ProductName/>
                            <RadzenRequiredValidator Component="Product Name" Text="Name is required" Style="position: absolute" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="align-items-center d-flex col-md-2">
                            <RadzenLabel Text="Description" />
                        </div>
                        <div class="col-md-10">
                            <RadzenTextBox Placeholder="3D Printer Filament 1.75mm" style="width: 100%;" Name="Product Description" @bind-Value=@product.ProductDescription/>
                        </div>
                    </div>
                    <div class="row">
                        <div class="align-items-center d-flex col-md-2">
                            <RadzenLabel Text="Price" />
                        </div>
                        <div class="col-md-10">
                            <RadzenNumeric @bind-Value=@price Step="0.01" Placeholder="0.0"/>
                        </div>
                    </div>
                    <div class="row">
                        <div class="align-items-center d-flex col-md-2">
                            <RadzenLabel Text="Brand" />
                        </div>
                        <div class="col-md-10">
                            <RadzenDropDownDataGrid @bind-Value=@brandName Data=@brandNames />
                        </div>
                    </div>
                    <div class="col-md-4 p-3">
                        <RadzenCard>
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Single file upload</RadzenText>
                                <RadzenUpload Url="upload/single" Progress="@((args) => OnProgress(args, "Single file upload"))" Accept="image/*"/>
                        </RadzenCard>
                    </div>
                      <div class="row justify-content-center">
                        <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save"/>
                            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" />
                        </div>
                    </div>
</RadzenTemplateForm>

@code {
    private Products product = new();
    private ProductCRUD crud = new();
    Brand brandToLink = new Brand();
    double? price;
    private string? URL;
    List<string>? brandNames;
    string? brandName;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        brandNames = await crud.GetBrandNames();
    }

    private async void HandleSubmit()
    {
        product.Price = price;
        product = await crud.ProductCleanser(product);

        if(brandName != null){
            brandToLink = await crud.BrandLookup(brandName);
        }
        // Process the form
        if(product != null)
        {
            await crud.CreateProducts(product);
        }

        if(product != null && brandName != null)
        {
            await crud.LinkBrandsToProducts(product, brandToLink);
        }

        if(product != null && URL != null)
        {
            await crud.UploadImagePathsToDb(URL, product);
        }
        DialogService.Close();
    }

    void Cancel()
    {
        DialogService.Close();    
    }

    void OnProgress(UploadProgressArgs args, string name)
    {

        if (args.Progress == 100)
        {
            foreach (var file in args.Files)
            {
                URL = $"{ file.Name}";
            }
        }
    }



}