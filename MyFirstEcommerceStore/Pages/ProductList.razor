@page "/products"
@using MyFirstEcommerceStore.Data
@inject IModalService modal

<h3>Products</h3>

@*<button @onclick="@(()=> modal.Show<ProductCreateDialog>())">New Product</button>*@
@*<button @onclick="ShowModal">New Product</button>*@
<div type="button" class="btn btn-secondary" @onclick="ShowModal">New Product</div>

@if (products == null)
{
    <p><em>Loading...</em></p>

    
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Part Number</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.ProductId</td>
                    <td>@product.ProductName</td>
                    <td>@product.ProductDescription</td>
                    <td>@product.Price</td>
                    <td><button class="btn btn-secondary" @onclick="@(e => HandleDelete(product))">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Products>? products;
    private ProductCRUD crud = new();
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        products = await crud.GetAllProducts();
    }

    private async void HandleDelete(Products product)
    {
        Console.WriteLine("Handling deletes " + product.ProductId);

        await crud.DeleteProduct(product);
    }

    private async Task ShowModal()
    {

        var productModal = Modal.Show<ProductCreateDialog>("Create Product");
        var result = await productModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            productModal.Close();
        }
        else if (result.Confirmed)
        {
            Console.WriteLine("Modal was closed");
            productModal.Close();
        }
    }

}
